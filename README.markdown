# Treealoc: Субаллокатор памяти на основе B-дерева

## Описание

Проект представляет собой субаллокатор памяти, использующий B-дерево для управления выделенными и освобождёнными блоками памяти в пространстве процесса. Субаллокатор инкапсулирован в динамическую библиотеку `libtreealoc.so`, которая перехватывает стандартные функции управления памятью (`malloc`, `free`, `realloc`, `calloc`) с помощью механизма `--wrap` компоновщика. Для наглядности реализована визуализация структуры B-дерева с использованием библиотек SDL2 и SDL2_ttf, что позволяет наблюдать за процессом выделения и освобождения памяти в реальном времени.

### Основные компоненты

- **B-дерево (`src/b_tree.c`, `src/b_tree.h`)**: Используется для хранения информации о блоках памяти (размер, адрес, статус — занятый или свободный). Реализованы функции вставки (`btree_insert`), пометки блоков как свободных (`btree_remove`) и поиска подходящих блоков.
- **Субаллокатор (`src/treealoc.c`, `src/treealoc.h`)**: Перехватывает вызовы `malloc`, `free`, `realloc` и `calloc`, управляя памятью через B-дерево. Использует `mmap` для выделения памяти.
- **Визуализация (`src/visual.c`, `src/visual.h`)**: Отображает структуру B-дерева в графическом окне. Каждый узел представлен как блок с указанием размера и адреса, цветом (тёмно-красный для занятых, тёмно-зелёный для свободных), тенью и белой обводкой для улучшенного дизайна. Поддерживает перемещение (WASD), масштабирование (+/-) и полноэкранный режим (F).
- **Тестовый проект (`src/test.c`)**: Содержит тесты для проверки работы субаллокатора в различных сценариях: простое выделение/освобождение, изменение размера блока, интенсивное использование.

### Почему B-дерево?

B-дерево выбрано для управления памятью по следующим причинам:
- **Эффективный поиск**: Поиск подходящего свободного блока выполняется за O(log n), что важно для больших объёмов данных.
- **Сбалансированность**: B-дерево автоматически поддерживает баланс, минимизируя фрагментацию памяти.
- **Поддержка обновляемых индексов**: Частые операции выделения и освобождения памяти выполняются эффективно благодаря структуре B-дерева.

### Перехват функций

- Функции `malloc`, `free`, `realloc` и `calloc` перехватываются с использованием опции `--wrap` компоновщика GCC.
- Перехват `calloc` реализован для единообразного управления памятью через субаллокатор: он вызывает `treealoc_malloc` и обнуляет выделенную память.
- Каждый вызов сопровождается логированием, что упрощает отладку.

## Установка и сборка

### Зависимости

- **GCC**: Компилятор для сборки проекта.
- **SDL2** (`libsdl2-dev`): Для графической визуализации.
- **SDL2_ttf** (`libsdl2-ttf-dev`): Для отображения текста в визуализации.
- **pthread**: Для многопоточности (визуализация запускается в отдельном потоке).
- **Шрифт LiberationSans**: Используется для текста в визуализации (обычно доступен в системах Linux, например, по пути `/usr/share/fonts/liberation-sans-fonts/LiberationSans-Regular.ttf`).

Установите зависимости в Ubuntu/Debian:
```bash
sudo apt update
sudo apt install build-essential libsdl2-dev libsdl2-ttf-dev
```

### Сборка

1. Склонируйте репозиторий (если он размещён в Git):
   ```bash
   git clone <repository-url>
   cd treealoc
   ```
2. Скомпилируйте проект:
   ```bash
   make clean && make
   ```
   - Это создаст директорию `build`, библиотеку `build/libtreealoc.so` и тестовый бинарник `build/test`.

### Запуск

Запустите тестовый проект:
```bash
./build/test
```

- Программа откроет окно визуализации и выведет меню с тестами.
- Введите номер теста (0–7) для запуска.

### Установка библиотеки (опционально)

Чтобы использовать библиотеку в других проектах, установите её в систему:
```bash
sudo make install
```
- Библиотека `libtreealoc.so` будет скопирована в `/usr/local/lib`.
- Заголовочный файл `treealoc.h` — в `/usr/local/include`.

## Использование

1. **Запуск тестов**:
   - После запуска `./build/test` выберите тест из меню:
     - `1`: Простое выделение и освобождение (`malloc`, `free`).
     - `2`: Изменение размера блока (`realloc`).
     - `3`: Выделение с обнулением (`calloc`).
     - `4`: Интенсивное выделение/освобождение (50 блоков).
     - `5`: Тест на фрагментацию памяти.
     - `6`: Проверка граничных случаев.
     - `7`: Запуск всех тестов.
     - `0`: Выход.
   - Каждый тест сопровождается логированием в консоль и обновлением визуализации.

2. **Управление визуализацией**:
   - Перемещение по дереву: клавиши WASD.
   - Масштабирование: `+` (увеличение) и `-` (уменьшение).
   - Полноэкранный режим: клавиша `F` (переключение).
   - Закрытие окна: крестик или Ctrl+C в терминале.

3. **Пример вывода визуализации**:
   - Каждый узел отображает размер блока и адрес (например, `91\n0x7cbcb0`).
   - Занятые блоки — тёмно-красные, свободные — тёмно-зелёные.
   - Узлы имеют белую обводку и тень для улучшенного дизайна.

## Ограничения

- **Поиск лучшего блока**: Функция поиска подходящего свободного блока (`btree_find_best_fit`) требует доработки для полного обхода дерева и выбора оптимального блока.
- **Удаление узлов**: Полное удаление узлов из B-дерева (`btree_remove`) не реализовано — блоки только помечаются как свободные.
- **Производительность визуализации**: При изменении размера окна могут наблюдаться небольшие лаги, несмотря на оптимизацию (debounce).
- **Параметр `T`**: Для больших деревьев может потребоваться увеличение минимальной степени B-дерева (`T`), которая сейчас фиксирована (`T=2`).

## Лицензия

Проект распространяется под лицензией MIT. См. файл `LICENSE` для подробностей.